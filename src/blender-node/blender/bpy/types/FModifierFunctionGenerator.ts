import * as util from 'util'
import { BlenderCollection, Indexable } from '../../collection'
import { BlenderInterop } from '../../../worker/interop'
import { PythonInterop } from '../../../python/interop'
import { bpy_struct } from './bpy_struct'
import { FModifier } from './FModifier'

/**
 * FModifierFunctionGenerator
 * 
 * https://docs.blender.org/api/current/bpy.types.FModifierFunctionGenerator.html
 */
export class FModifierFunctionGenerator {

    constructor(public interop: BlenderInterop, public accessor: string) { }

    /**
     * Scale factor determining the maximum/minimum values
     * @desc float in [-inf, inf], default 0.0
     */
    public get amplitude(): number {
        return PythonInterop.getFloat(this.interop, `${this.accessor}.amplitude`)
    }

    /**
     * Type of built-in function to use
     * @desc enum in ['SIN', 'COS', 'TAN', 'SQRT', 'LN', 'SINC'], default 'SIN'
     */
    public get function_type(): 'SIN' | 'COS' | 'TAN' | 'SQRT' | 'LN' | 'SINC' {
        return PythonInterop.getEnum(this.interop, `${this.accessor}.function_type`)
    }

    /**
     * Scale factor determining the ‘speed’ of the function
     * @desc float in [-inf, inf], default 0.0
     */
    public get phase_multiplier(): number {
        return PythonInterop.getFloat(this.interop, `${this.accessor}.phase_multiplier`)
    }

    /**
     * Constant factor to offset time by for function
     * @desc float in [-inf, inf], default 0.0
     */
    public get phase_offset(): number {
        return PythonInterop.getFloat(this.interop, `${this.accessor}.phase_offset`)
    }

    /**
     * Values generated by this modifier are applied on top of the existing values instead of overwriting them
     * @desc boolean, default False
     */
    public get use_additive(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.use_additive`)
    }

    /**
     * Constant factor to offset values by
     * @desc float in [-inf, inf], default 0.0
     */
    public get value_offset(): number {
        return PythonInterop.getFloat(this.interop, `${this.accessor}.value_offset`)
    }

    /**
     * Scale factor determining the maximum/minimum values
     * @desc float in [-inf, inf], default 0.0
     */
    public set amplitude(value: number) {
        PythonInterop.setFloat(this.interop, `${this.accessor}.amplitude`, value)
    }

    /**
     * Type of built-in function to use
     * @desc enum in ['SIN', 'COS', 'TAN', 'SQRT', 'LN', 'SINC'], default 'SIN'
     */
    public set function_type(value: 'SIN' | 'COS' | 'TAN' | 'SQRT' | 'LN' | 'SINC') {
        PythonInterop.setEnum(this.interop, `${this.accessor}.function_type`, value)
    }

    /**
     * Scale factor determining the ‘speed’ of the function
     * @desc float in [-inf, inf], default 0.0
     */
    public set phase_multiplier(value: number) {
        PythonInterop.setFloat(this.interop, `${this.accessor}.phase_multiplier`, value)
    }

    /**
     * Constant factor to offset time by for function
     * @desc float in [-inf, inf], default 0.0
     */
    public set phase_offset(value: number) {
        PythonInterop.setFloat(this.interop, `${this.accessor}.phase_offset`, value)
    }

    /**
     * Values generated by this modifier are applied on top of the existing values instead of overwriting them
     * @desc boolean, default False
     */
    public set use_additive(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.use_additive`, value)
    }

    /**
     * Constant factor to offset values by
     * @desc float in [-inf, inf], default 0.0
     */
    public set value_offset(value: number) {
        PythonInterop.setFloat(this.interop, `${this.accessor}.value_offset`, value)
    }

    [util.inspect.custom]() {
        return this.accessor
    }
}
