import * as util from 'util'
import { BlenderCollection, Indexable } from '../../collection'
import { BlenderInterop } from '../../../worker/interop'
import { PythonInterop } from '../../../python/interop'
import { ParticleTarget } from './ParticleTarget'
import { ChildParticle } from './ChildParticle'
import { ClothModifier } from './ClothModifier'
import { Particle } from './Particle'
import { PointCache } from './PointCache'
import { BlenderObject } from './BlenderObject'
import { ParticleSettings } from './ParticleSettings'

/**
 * ParticleSystem
 * 
 * https://docs.blender.org/api/current/bpy.types.ParticleSystem.html
 */
export class ParticleSystem {

    constructor(public interop: BlenderInterop, public accessor: string) { }

    /**
     * 
     * @desc ParticleTarget, (readonly)
     */
    public get active_particle_target(): ParticleTarget {
        return PythonInterop.getClass(this.interop, `${this.accessor}.active_particle_target`, ParticleTarget)
    }

    /**
     * Child particles generated by the particle system
     * @desc bpy_prop_collection of ChildParticle, (readonly)
     */
    public get child_particles(): BlenderCollection<ChildParticle> & Indexable<ChildParticle> {
        return BlenderCollection.createGeneric(this.interop, `${this.accessor}.child_particles`, ChildParticle)
    }

    /**
     * Cloth dynamics for hair
     * @desc ClothModifier, (readonly, never None)
     */
    public get cloth(): ClothModifier {
        return PythonInterop.getClass(this.interop, `${this.accessor}.cloth`, ClothModifier)
    }

    /**
     * The current simulation time step size, as a fraction of a frame
     * @desc float in [0.00990099, 1], default 0.0, (readonly)
     */
    public get dt_frac(): number {
        return PythonInterop.getFloat(this.interop, `${this.accessor}.dt_frac`)
    }

    /**
     * Particle system has multiple point caches
     * @desc boolean, default False, (readonly)
     */
    public get has_multiple_caches(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.has_multiple_caches`)
    }

    /**
     * Particle system can be edited in particle mode
     * @desc boolean, default False, (readonly)
     */
    public get is_editable(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.is_editable`)
    }

    /**
     * Particle system has been edited in particle mode
     * @desc boolean, default False, (readonly)
     */
    public get is_edited(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.is_edited`)
    }

    /**
     * Hair keys are in global coordinate space
     * @desc boolean, default False, (readonly)
     */
    public get is_global_hair(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.is_global_hair`)
    }

    /**
     * Particles generated by the particle system
     * @desc bpy_prop_collection of Particle, (readonly)
     */
    public get particles(): BlenderCollection<Particle> & Indexable<Particle> {
        return BlenderCollection.createGeneric(this.interop, `${this.accessor}.particles`, Particle)
    }

    /**
     * 
     * @desc PointCache, (readonly, never None)
     */
    public get point_cache(): PointCache {
        return PythonInterop.getClass(this.interop, `${this.accessor}.point_cache`, PointCache)
    }

    /**
     * Target particle systems
     * @desc bpy_prop_collection of ParticleTarget, (readonly)
     */
    public get targets(): BlenderCollection<ParticleTarget> & Indexable<ParticleTarget> {
        return BlenderCollection.createGeneric(this.interop, `${this.accessor}.targets`, ParticleTarget)
    }

    /**
     * 
     * @desc int in [0, inf], default 0
     */
    public get active_particle_target_index(): number {
        return PythonInterop.getInteger(this.interop, `${this.accessor}.active_particle_target_index`)
    }

    /**
     * Offset in the random number table for child particles, to get a different randomized result
     * @desc int in [0, inf], default 0
     */
    public get child_seed(): number {
        return PythonInterop.getInteger(this.interop, `${this.accessor}.child_seed`)
    }

    /**
     * Negate the effect of the clump vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_clump(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_clump`)
    }

    /**
     * Negate the effect of the density vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_density(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_density`)
    }

    /**
     * Negate the effect of the field vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_field(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_field`)
    }

    /**
     * Negate the effect of the kink vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_kink(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_kink`)
    }

    /**
     * Negate the effect of the length vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_length(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_length`)
    }

    /**
     * Negate the effect of the rotation vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_rotation(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_rotation`)
    }

    /**
     * Negate the effect of the roughness 1 vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_roughness_1(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_1`)
    }

    /**
     * Negate the effect of the roughness 2 vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_roughness_2(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_2`)
    }

    /**
     * Negate the effect of the roughness end vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_roughness_end(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_end`)
    }

    /**
     * Negate the effect of the size vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_size(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_size`)
    }

    /**
     * Negate the effect of the tangent vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_tangent(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_tangent`)
    }

    /**
     * Negate the effect of the twist vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_twist(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_twist`)
    }

    /**
     * Negate the effect of the velocity vertex group
     * @desc boolean, default False
     */
    public get invert_vertex_group_velocity(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.invert_vertex_group_velocity`)
    }

    /**
     * Particle system name
     * @desc string, default '', (never None)
     */
    public get name(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.name`)
    }

    /**
     * Use this objectâ€™s coordinate system instead of global coordinate system
     * @desc Object
     */
    public get parent(): BlenderObject {
        return PythonInterop.getClass(this.interop, `${this.accessor}.parent`, BlenderObject)
    }

    /**
     * For reactor systems, the object that has the target particle system (empty if same object)
     * @desc Object
     */
    public get reactor_target_object(): BlenderObject {
        return PythonInterop.getClass(this.interop, `${this.accessor}.reactor_target_object`, BlenderObject)
    }

    /**
     * For reactor systems, index of particle system on the target object
     * @desc int in [1, 32767], default 0
     */
    public get reactor_target_particle_system(): number {
        return PythonInterop.getInteger(this.interop, `${this.accessor}.reactor_target_particle_system`)
    }

    /**
     * Offset in the random number table, to get a different randomized result
     * @desc int in [0, inf], default 0
     */
    public get seed(): number {
        return PythonInterop.getInteger(this.interop, `${this.accessor}.seed`)
    }

    /**
     * Particle system settings
     * @desc ParticleSettings, (never None)
     */
    public get settings(): ParticleSettings {
        return PythonInterop.getClass(this.interop, `${this.accessor}.settings`, ParticleSettings)
    }

    /**
     * Enable hair dynamics using cloth simulation
     * @desc boolean, default False
     */
    public get use_hair_dynamics(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.use_hair_dynamics`)
    }

    /**
     * Use key times
     * @desc boolean, default False
     */
    public get use_keyed_timing(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.use_keyed_timing`)
    }

    /**
     * Vertex group to control clump
     * @desc string, default '', (never None)
     */
    public get vertex_group_clump(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_clump`)
    }

    /**
     * Vertex group to control density
     * @desc string, default '', (never None)
     */
    public get vertex_group_density(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_density`)
    }

    /**
     * Vertex group to control field
     * @desc string, default '', (never None)
     */
    public get vertex_group_field(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_field`)
    }

    /**
     * Vertex group to control kink
     * @desc string, default '', (never None)
     */
    public get vertex_group_kink(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_kink`)
    }

    /**
     * Vertex group to control length
     * @desc string, default '', (never None)
     */
    public get vertex_group_length(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_length`)
    }

    /**
     * Vertex group to control rotation
     * @desc string, default '', (never None)
     */
    public get vertex_group_rotation(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_rotation`)
    }

    /**
     * Vertex group to control roughness 1
     * @desc string, default '', (never None)
     */
    public get vertex_group_roughness_1(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_roughness_1`)
    }

    /**
     * Vertex group to control roughness 2
     * @desc string, default '', (never None)
     */
    public get vertex_group_roughness_2(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_roughness_2`)
    }

    /**
     * Vertex group to control roughness end
     * @desc string, default '', (never None)
     */
    public get vertex_group_roughness_end(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_roughness_end`)
    }

    /**
     * Vertex group to control size
     * @desc string, default '', (never None)
     */
    public get vertex_group_size(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_size`)
    }

    /**
     * Vertex group to control tangent
     * @desc string, default '', (never None)
     */
    public get vertex_group_tangent(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_tangent`)
    }

    /**
     * Vertex group to control twist
     * @desc string, default '', (never None)
     */
    public get vertex_group_twist(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_twist`)
    }

    /**
     * Vertex group to control velocity
     * @desc string, default '', (never None)
     */
    public get vertex_group_velocity(): string {
        return PythonInterop.getString(this.interop, `${this.accessor}.vertex_group_velocity`)
    }

    /**
     * 
     * @desc int in [0, inf], default 0
     */
    public set active_particle_target_index(value: number) {
        PythonInterop.setInteger(this.interop, `${this.accessor}.active_particle_target_index`, value)
    }

    /**
     * Offset in the random number table for child particles, to get a different randomized result
     * @desc int in [0, inf], default 0
     */
    public set child_seed(value: number) {
        PythonInterop.setInteger(this.interop, `${this.accessor}.child_seed`, value)
    }

    /**
     * Negate the effect of the clump vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_clump(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_clump`, value)
    }

    /**
     * Negate the effect of the density vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_density(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_density`, value)
    }

    /**
     * Negate the effect of the field vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_field(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_field`, value)
    }

    /**
     * Negate the effect of the kink vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_kink(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_kink`, value)
    }

    /**
     * Negate the effect of the length vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_length(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_length`, value)
    }

    /**
     * Negate the effect of the rotation vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_rotation(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_rotation`, value)
    }

    /**
     * Negate the effect of the roughness 1 vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_roughness_1(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_1`, value)
    }

    /**
     * Negate the effect of the roughness 2 vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_roughness_2(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_2`, value)
    }

    /**
     * Negate the effect of the roughness end vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_roughness_end(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_roughness_end`, value)
    }

    /**
     * Negate the effect of the size vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_size(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_size`, value)
    }

    /**
     * Negate the effect of the tangent vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_tangent(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_tangent`, value)
    }

    /**
     * Negate the effect of the twist vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_twist(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_twist`, value)
    }

    /**
     * Negate the effect of the velocity vertex group
     * @desc boolean, default False
     */
    public set invert_vertex_group_velocity(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.invert_vertex_group_velocity`, value)
    }

    /**
     * Particle system name
     * @desc string, default '', (never None)
     */
    public set name(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.name`, value)
    }

    /**
     * Use this objectâ€™s coordinate system instead of global coordinate system
     * @desc Object
     */
    public set parent(value: BlenderObject) {
        PythonInterop.setClass(this.interop, `${this.accessor}.parent`, value)
    }

    /**
     * For reactor systems, the object that has the target particle system (empty if same object)
     * @desc Object
     */
    public set reactor_target_object(value: BlenderObject) {
        PythonInterop.setClass(this.interop, `${this.accessor}.reactor_target_object`, value)
    }

    /**
     * For reactor systems, index of particle system on the target object
     * @desc int in [1, 32767], default 0
     */
    public set reactor_target_particle_system(value: number) {
        PythonInterop.setInteger(this.interop, `${this.accessor}.reactor_target_particle_system`, value)
    }

    /**
     * Offset in the random number table, to get a different randomized result
     * @desc int in [0, inf], default 0
     */
    public set seed(value: number) {
        PythonInterop.setInteger(this.interop, `${this.accessor}.seed`, value)
    }

    /**
     * Particle system settings
     * @desc ParticleSettings, (never None)
     */
    public set settings(value: ParticleSettings) {
        PythonInterop.setClass(this.interop, `${this.accessor}.settings`, value)
    }

    /**
     * Enable hair dynamics using cloth simulation
     * @desc boolean, default False
     */
    public set use_hair_dynamics(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.use_hair_dynamics`, value)
    }

    /**
     * Use key times
     * @desc boolean, default False
     */
    public set use_keyed_timing(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.use_keyed_timing`, value)
    }

    /**
     * Vertex group to control clump
     * @desc string, default '', (never None)
     */
    public set vertex_group_clump(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_clump`, value)
    }

    /**
     * Vertex group to control density
     * @desc string, default '', (never None)
     */
    public set vertex_group_density(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_density`, value)
    }

    /**
     * Vertex group to control field
     * @desc string, default '', (never None)
     */
    public set vertex_group_field(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_field`, value)
    }

    /**
     * Vertex group to control kink
     * @desc string, default '', (never None)
     */
    public set vertex_group_kink(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_kink`, value)
    }

    /**
     * Vertex group to control length
     * @desc string, default '', (never None)
     */
    public set vertex_group_length(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_length`, value)
    }

    /**
     * Vertex group to control rotation
     * @desc string, default '', (never None)
     */
    public set vertex_group_rotation(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_rotation`, value)
    }

    /**
     * Vertex group to control roughness 1
     * @desc string, default '', (never None)
     */
    public set vertex_group_roughness_1(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_roughness_1`, value)
    }

    /**
     * Vertex group to control roughness 2
     * @desc string, default '', (never None)
     */
    public set vertex_group_roughness_2(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_roughness_2`, value)
    }

    /**
     * Vertex group to control roughness end
     * @desc string, default '', (never None)
     */
    public set vertex_group_roughness_end(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_roughness_end`, value)
    }

    /**
     * Vertex group to control size
     * @desc string, default '', (never None)
     */
    public set vertex_group_size(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_size`, value)
    }

    /**
     * Vertex group to control tangent
     * @desc string, default '', (never None)
     */
    public set vertex_group_tangent(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_tangent`, value)
    }

    /**
     * Vertex group to control twist
     * @desc string, default '', (never None)
     */
    public set vertex_group_twist(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_twist`, value)
    }

    /**
     * Vertex group to control velocity
     * @desc string, default '', (never None)
     */
    public set vertex_group_velocity(value: string) {
        PythonInterop.setString(this.interop, `${this.accessor}.vertex_group_velocity`, value)
    }

    /**
     * Obtain cache hair data
     * @desc float array of 3 items in [-inf, inf]
     */
    public co_hair(options: { object?: BlenderObject, particle_no?: number, step?: number }): [number, number, number] {
        return PythonInterop.callArray(this.interop, `${this.accessor}.co_hair`, options)
    }

    /**
     * Obtain uv for all particles
     * @desc float array of 2 items in [-inf, inf]
     */
    public uv_on_emitter(options: { modifier?: unknown, particle?: Particle, particle_no?: number, uv_no?: number }): [number, number] {
        return PythonInterop.callArray(this.interop, `${this.accessor}.uv_on_emitter`, options)
    }

    /**
     * Obtain mcol for all particles
     * @desc float array of 3 items in [0, inf]
     */
    public mcol_on_emitter(options: { modifier?: unknown, particle?: Particle, particle_no?: number, vcol_no?: number }): [number, number, number] {
        return PythonInterop.callArray(this.interop, `${this.accessor}.mcol_on_emitter`, options)
    }

    [util.inspect.custom]() {
        return this.accessor
    }
}
