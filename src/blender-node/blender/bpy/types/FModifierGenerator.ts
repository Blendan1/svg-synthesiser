import * as util from 'util'
import { BlenderCollection, Indexable } from '../../collection'
import { BlenderInterop } from '../../../worker/interop'
import { PythonInterop } from '../../../python/interop'
import { bpy_struct } from './bpy_struct'
import { FModifier } from './FModifier'

/**
 * FModifierGenerator
 * 
 * https://docs.blender.org/api/current/bpy.types.FModifierGenerator.html
 */
export class FModifierGenerator {

    constructor(public interop: BlenderInterop, public accessor: string) { }

    /**
     * Coefficients for ‘x’ (starting from lowest power of x^0)
     * @desc float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
     */
    public get coefficients(): [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number] {
        return PythonInterop.getArray(this.interop, `${this.accessor}.coefficients`, 'number', 32)
    }

    /**
     * Type of generator to use
     * @desc enum in ['POLYNOMIAL', 'POLYNOMIAL_FACTORISED'], default 'POLYNOMIAL'
     */
    public get mode(): 'POLYNOMIAL' | 'POLYNOMIAL_FACTORISED' {
        return PythonInterop.getEnum(this.interop, `${this.accessor}.mode`)
    }

    /**
     * The highest power of ‘x’ for this polynomial (number of coefficients - 1)
     * @desc int in [1, 100], default 0
     */
    public get poly_order(): number {
        return PythonInterop.getInteger(this.interop, `${this.accessor}.poly_order`)
    }

    /**
     * Values generated by this modifier are applied on top of the existing values instead of overwriting them
     * @desc boolean, default False
     */
    public get use_additive(): boolean {
        return PythonInterop.getBoolean(this.interop, `${this.accessor}.use_additive`)
    }

    /**
     * Coefficients for ‘x’ (starting from lowest power of x^0)
     * @desc float array of 32 items in [-inf, inf], default (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
     */
    public set coefficients(value: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number]) {
        PythonInterop.setArray(this.interop, `${this.accessor}.coefficients`, value)
    }

    /**
     * Type of generator to use
     * @desc enum in ['POLYNOMIAL', 'POLYNOMIAL_FACTORISED'], default 'POLYNOMIAL'
     */
    public set mode(value: 'POLYNOMIAL' | 'POLYNOMIAL_FACTORISED') {
        PythonInterop.setEnum(this.interop, `${this.accessor}.mode`, value)
    }

    /**
     * The highest power of ‘x’ for this polynomial (number of coefficients - 1)
     * @desc int in [1, 100], default 0
     */
    public set poly_order(value: number) {
        PythonInterop.setInteger(this.interop, `${this.accessor}.poly_order`, value)
    }

    /**
     * Values generated by this modifier are applied on top of the existing values instead of overwriting them
     * @desc boolean, default False
     */
    public set use_additive(value: boolean) {
        PythonInterop.setBoolean(this.interop, `${this.accessor}.use_additive`, value)
    }

    [util.inspect.custom]() {
        return this.accessor
    }
}
